// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Benchmarks.Serializers.Models
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SimpleFlatBufferModel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static SimpleFlatBufferModel GetRootAsSimpleFlatBufferModel(ByteBuffer _bb) { return GetRootAsSimpleFlatBufferModel(_bb, new SimpleFlatBufferModel()); }
  public static SimpleFlatBufferModel GetRootAsSimpleFlatBufferModel(ByteBuffer _bb, SimpleFlatBufferModel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SimpleFlatBufferModel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int TestInt { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string TestString { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTestStringBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTestStringBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTestStringArray() { return __p.__vector_as_array<byte>(6); }
  public bool TestBool { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<SimpleFlatBufferModel> CreateSimpleFlatBufferModel(FlatBufferBuilder builder,
      int test_int = 0,
      StringOffset test_stringOffset = default(StringOffset),
      bool test_bool = false) {
    builder.StartTable(3);
    SimpleFlatBufferModel.AddTestString(builder, test_stringOffset);
    SimpleFlatBufferModel.AddTestInt(builder, test_int);
    SimpleFlatBufferModel.AddTestBool(builder, test_bool);
    return SimpleFlatBufferModel.EndSimpleFlatBufferModel(builder);
  }

  public static void StartSimpleFlatBufferModel(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddTestInt(FlatBufferBuilder builder, int testInt) { builder.AddInt(0, testInt, 0); }
  public static void AddTestString(FlatBufferBuilder builder, StringOffset testStringOffset) { builder.AddOffset(1, testStringOffset.Value, 0); }
  public static void AddTestBool(FlatBufferBuilder builder, bool testBool) { builder.AddBool(2, testBool, false); }
  public static Offset<SimpleFlatBufferModel> EndSimpleFlatBufferModel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SimpleFlatBufferModel>(o);
  }
}


static public class SimpleFlatBufferModelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*TestInt*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*TestString*/, false)
      && verifier.VerifyField(tablePos, 8 /*TestBool*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
